{
  "frontend": [
    {
      "id": 1,
      "question": "What is the difference between `null` and `undefined` in JavaScript?",
      "answer": "**`undefined`** means a variable has been declared but has not yet been assigned a value. It's the default value for uninitialized variables. **`null`** is an assignment value that represents the intentional absence of any object value. It's a placeholder for 'no value'. To put it simply, `undefined` is what you get, while `null` is what you set."
    },
    {
      "id": 2,
      "question": "What is the virtual DOM, and how does it improve performance in React?",
      "answer": "The **Virtual DOM** (VDOM) is a lightweight copy of the actual DOM. When state changes, React first updates the VDOM. It then uses a diffing algorithm to compare the new VDOM with the old one, determining the minimal number of changes required to update the real DOM. This process, called **reconciliation**, is more efficient than directly manipulating the real DOM, which is a very expensive operation. By only updating the necessary parts of the DOM, React significantly improves performance."
    },
    {
      "id": 3,
      "question": "Explain the concept of 'hoisting' in JavaScript.",
      "answer": "**Hoisting** is a JavaScript behavior where variable and function declarations are moved to the top of their containing scope during the compilation phase, before code execution. This means you can use a variable or call a function before it is declared in the code. However, only the declaration is hoisted, not the initialization. `var` variables are hoisted and initialized with `undefined`, while `let` and `const` declarations are also hoisted but not initialized, resulting in a 'Temporal Dead Zone' error if accessed before declaration."
    },
    {
      "id": 4,
      "question": "What are the key features of CSS Flexbox?",
      "answer": "**Flexbox** (or the Flexible Box Layout) is a one-dimensional CSS layout model for arranging items in a container. Its key features include: **Alignment** (aligning items along the main and cross axes), **Ordering** (reordering elements without changing HTML), **Flexibility** (items can grow or shrink to fit the space), and **Responsiveness** (it simplifies creating complex, responsive layouts without floats or positioning)."
    },
    {
      "id": 5,
      "question": "What is the purpose of `useState` hook in React?",
      "answer": "The **`useState`** hook is a fundamental React hook that lets you add state to functional components. It returns a pair of values: the current state and a function that updates it. This allows components to manage and re-render with changing data without using class components."
    },
    {
      "id": 6,
      "question": "Explain the difference between `==` and `===` in JavaScript.",
      "answer": "The `==` operator performs a **loose equality** comparison. It checks if two values are equal after performing type coercion (converting one or both values to a common type). The `===` operator performs a **strict equality** comparison. It checks if two values are equal **without** type coercion, meaning both the value and the type must be the same to return `true`."
    },
    {
      "id": 7,
      "question": "What is the role of a package manager like npm?",
      "answer": "A **package manager** like **npm** (Node Package Manager) is a tool that automates the process of installing, updating, and managing project dependencies. It allows developers to easily share and reuse code packages from a central registry, ensuring that all project members are using the same versions of libraries and tools, which simplifies project setup and collaboration."
    },
    {
      "id": 8,
      "question": "Describe the purpose of CSS media queries.",
      "answer": "**Media queries** are a CSS feature that allows you to apply different styles to a webpage based on the characteristics of the device it's being viewed on, such as screen width, height, or orientation. They are essential for building **responsive web design**, enabling a single webpage to adapt its layout and appearance to fit various devices, from mobile phones to large desktop monitors."
    },
    {
      "id": 9,
      "question": "What is event bubbling in the DOM?",
      "answer": "**Event bubbling** is a form of event propagation where an event, when triggered on an element, first runs on that element and then 'bubbles up' to its parent, then its grandparent, and so on, up the DOM tree. This allows a single event handler on a parent element to manage events for all its child elements, which is useful for delegation and reducing the number of event listeners in your code."
    },
    {
      "id": 10,
      "question": "How do you handle asynchronous operations in JavaScript?",
      "answer": "Asynchronous operations (like fetching data from an API) can be handled using **callbacks**, **Promises**, or the modern **`async/await`** syntax. Promises are objects representing the eventual completion or failure of an asynchronous operation. The `async/await` syntax, built on top of Promises, provides a cleaner way to write asynchronous code that looks and behaves like synchronous code, making it easier to read and debug."
    }
  ],
  "backend": [
    {
      "id": 1,
      "question": "What is a REST API?",
      "answer": "A **REST (Representational State Transfer) API** is an architectural style for designing networked applications. It's a set of rules that defines how clients and servers communicate. It uses standard HTTP methods (like `GET` to retrieve data, `POST` to create data, `PUT` to update, and `DELETE` to remove) and is stateless, meaning each request from a client to a server contains all the information needed to understand the request."
    },
    {
      "id": 2,
      "question": "What are the differences between SQL and NoSQL databases?",
      "answer": "**SQL databases** (like PostgreSQL or MySQL) are relational, using a structured, table-based schema with predefined rows and columns. They are ideal for applications that require strong data consistency and complex queries. **NoSQL databases** (like MongoDB or Cassandra) are non-relational and use flexible schemas (e.g., document, key-value, graph). They are better suited for handling large volumes of unstructured data, rapid development, and horizontal scaling."
    },
    {
      "id": 3,
      "question": "What is the purpose of a server-side framework?",
      "answer": "A **server-side framework** (like Express.js or Django) provides a foundation for building the backend of a web application. Its purpose is to handle common tasks and boilerplate code, such as routing, database interactions, handling HTTP requests, and managing sessions. By abstracting these complexities, frameworks allow developers to focus on the application's business logic, speeding up development and ensuring a more organized, scalable codebase."
    },
    {
      "id": 4,
      "question": "How does a web server handle concurrent requests?",
      "answer": "Web servers typically handle concurrent requests using a **multi-threading** or **event-driven, non-blocking I/O** architecture. A multi-threaded model (like Apache) assigns a new thread to each request. An event-driven model (like Node.js) uses a single thread and an event loop to handle multiple requests asynchronously, which is often more memory-efficient and scalable for I/O-heavy applications. Both methods allow the server to process multiple requests simultaneously without one request blocking another."
    },
    {
      "id": 5,
      "question": "What is middleware in a backend framework?",
      "answer": "**Middleware** is a function that has access to the request object (`req`), the response object (`res`), and the next middleware function in the applicationâ€™s request-response cycle. It can execute code, modify the request and response objects, end the request-response cycle, or call the next middleware. Common uses include logging, authentication, and parsing request bodies."
    },
    {
      "id": 6,
      "question": "Explain the concept of 'statelessness' in RESTful APIs.",
      "answer": "A **stateless** API means that the server does not store any information about the client's state between requests. Every request from the client to the server must contain all the information the server needs to understand and process the request. This makes the API more scalable, as the server doesn't need to dedicate resources to maintaining session data for each client, and it makes the API more reliable."
    },
    {
      "id": 7,
      "question": "What is the purpose of an ORM (Object-Relational Mapper)?",
      "answer": "An **ORM** is a programming tool that allows developers to interact with a relational database using an object-oriented paradigm. Instead of writing raw SQL queries, you use methods and properties of objects in your preferred programming language. The ORM translates these object-oriented operations into SQL queries, making database interactions more intuitive, less error-prone, and often more portable across different database systems."
    },
    {
      "id": 8,
      "question": "What are the key differences between synchronous and asynchronous code?",
      "answer": "**Synchronous** code executes one line at a time, in order. A task must complete before the next one begins, which can 'block' the program. **Asynchronous** code allows a program to begin a long-running task and continue executing other code without waiting for the task to finish. The long-running task completes in the background and notifies the program when it's done. This is crucial for performance in web applications, especially for I/O operations."
    },
    {
      "id": 9,
      "question": "What is a serverless architecture?",
      "answer": "**Serverless architecture** is a cloud computing model where the cloud provider manages the server infrastructure, so developers don't have to. You write and deploy code in small, single-purpose functions (e.g., AWS Lambda, Google Cloud Functions). The provider automatically scales the resources up or down as needed and you only pay for the compute time consumed by your code. This simplifies deployment and can reduce costs for applications with variable traffic."
    },
    {
      "id": 10,
      "question": "Explain the concept of 'hashing' for passwords.",
      "answer": "**Hashing** is the process of converting an input (like a password) into a fixed-size string of characters using a mathematical function (a hash function). This is a one-way process; it's extremely difficult to reverse a hash to get the original password. Instead of storing passwords in plain text, you store their hashes. When a user logs in, you hash the entered password and compare the new hash to the stored one. This protects user data, as even if the database is compromised, the actual passwords are not exposed."
    }
  ],
  "fullstack": [
    {
      "id": 1,
      "question": "What is the MERN stack?",
      "answer": "The **MERN stack** is a popular collection of technologies used to build full-stack web applications. It stands for **M**ongoDB (a NoSQL database), **E**xpress.js (a backend framework), **R**eact (a frontend library), and **N**ode.js (a JavaScript runtime environment). It's a unified stack where both the frontend and backend are written in JavaScript, simplifying development and data flow."
    },
    {
      "id": 2,
      "question": "How do you handle authentication in a full-stack application?",
      "answer": "Authentication is commonly handled using **JSON Web Tokens (JWTs)** or **session-based authentication**. In a JWT-based approach, a user logs in, the server creates a token containing user data, and sends it back. The client stores this token and includes it in the header of every subsequent request. The server verifies the token to authenticate the user. Session-based authentication involves storing a user's session data on the server and using a session ID (often stored in a cookie) to identify the user on each request."
    },
    {
      "id": 3,
      "question": "What is the role of a reverse proxy in a full-stack application?",
      "answer": "A **reverse proxy** sits in front of one or more web servers and forwards client requests to them. Its role is to provide an additional layer of security, improve performance, and manage traffic. It can handle tasks like load balancing (distributing traffic across multiple servers), SSL/TLS termination (decrypting incoming requests), and caching static content, which offloads work from the main application servers."
    },
    {
      "id": 4,
      "question": "How do you optimize a full-stack application for performance?",
      "answer": "Optimization involves both the frontend and backend. On the **frontend**, you can optimize by: **minifying CSS and JS**, **lazy-loading images**, and using a **CDN** for static assets. On the **backend**, optimizations include: **database query optimization** (using indexes), **caching frequently accessed data**, and **implementing a load balancer** to distribute traffic. Full-stack performance is about ensuring efficient communication between all layers."
    },
    {
      "id": 5,
      "question": "What is CORS and why is it important for full-stack development?",
      "answer": "**CORS** (Cross-Origin Resource Sharing) is a security mechanism that allows a web browser to make requests to an API running on a different domain. It's crucial because browsers, by default, prevent cross-origin requests to protect against malicious attacks. In full-stack development, you must configure CORS on your backend server to allow your frontend application (which is on a different origin) to safely access your API."
    },
    {
      "id": 6,
      "question": "How do you manage environment variables in a full-stack project?",
      "answer": "Environment variables (like API keys or database connection strings) should be stored outside the codebase to protect sensitive information. This is typically done using a `.env` file in development. The application reads these variables at runtime. On a production server, they are set directly on the hosting platform's configuration panel. This practice prevents exposing secrets in your source code, which is especially important for public repositories."
    },
    {
      "id": 7,
      "question": "Explain the concept of 'state management' in a full-stack context.",
      "answer": "State management refers to the process of organizing, storing, and updating the data that defines the current state of an application. In a full-stack application, this involves both client-side and server-side state. The frontend manages UI state (e.g., if a modal is open), while the backend manages global application state (e.g., user authentication status). Tools like Redux or React Context on the frontend and databases on the backend help manage this flow of data."
    },
    {
      "id": 8,
      "question": "What is the purpose of a monorepo in full-stack development?",
      "answer": "A **monorepo** (monolithic repository) is a single version control repository that contains the code for multiple projects. For a full-stack application, this means the frontend and backend codebases live side-by-side in the same repo. This simplifies code sharing between the two parts of the application (e.g., shared types or validation logic) and ensures that changes to the backend can be easily synchronized with corresponding frontend updates in a single commit."
    },
    {
      "id": 9,
      "question": "What is a containerization and why is it used for full-stack apps?",
      "answer": "**Containerization** (using tools like Docker) is the process of packaging an application and its dependencies into a self-contained unit called a container. This ensures the application runs consistently across different environments (from development to production). For full-stack apps, you can containerize the frontend and backend separately, simplifying deployment and ensuring that the entire stack behaves predictably, regardless of the host machine."
    },
    {
      "id": 10,
      "question": "How do you handle real-time data in a full-stack application?",
      "answer": "Real-time data updates (e.g., for chat applications or live dashboards) are handled using technologies like **WebSockets** or **Server-Sent Events (SSE)**. **WebSockets** provide a persistent, two-way communication channel between the client and server, allowing the server to push updates to the client whenever new data is available. This is more efficient than the traditional method of the client constantly polling the server for new data."
    }
  ]
}